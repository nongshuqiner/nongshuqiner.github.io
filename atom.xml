<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nongshuqiner.github.io/</id>
    <title>yanmoer&apos;s blog</title>
    <updated>2021-11-26T10:51:28.397Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nongshuqiner.github.io/"/>
    <link rel="self" href="https://nongshuqiner.github.io/atom.xml"/>
    <subtitle>悟时超十地三乘，凝滞了四生六道...</subtitle>
    <logo>https://nongshuqiner.github.io/images/avatar.png</logo>
    <icon>https://nongshuqiner.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, yanmoer&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[生成树结构（generate tree）]]></title>
        <id>https://nongshuqiner.github.io/post/generate-tree/</id>
        <link href="https://nongshuqiner.github.io/post/generate-tree/">
        </link>
        <updated>2021-11-26T07:56:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="generate-tree">generate-tree</h2>
<blockquote>
<p>把<code>一维数组</code>转为<code>树形结构</code>或者<code>生成树菜单</code>。</p>
</blockquote>
<p>新建generate-tree.js，复制一下代码：</p>
<pre><code>/**
 * 生成树结构
 * Callback:
 * - node, 子节点
 * - props, 参数props
 * @param {Array} data 需要处理的数组
 * @param {Array} props 属性
 * @param {Function} strucChangeCallback 更改结构的回调函数
 */
export const generateTree = function (
  data,
  props = {
    parentId: &quot;parentId&quot;,
    id: &quot;id&quot;
  },
  strucChangeCallback = function (node, props) {
    return node;
  }
) {
  // 把跟节点首先放进数组，根节点支持：null 0 &quot;&quot;
  const tmpTree = data
    .filter(node =&gt; !node[props.parentId])
    .map(node =&gt; strucChangeCallback(node, props));
  // 递归生成节点及子节点数据
  const findChildren = tree =&gt; {
    tree.forEach(node =&gt; {
      node.children = data
        .filter(cNode =&gt; cNode[props.parentId] === node[props.id])
        .map(node =&gt; strucChangeCallback(node, props));
      if (node.children.length) {
        findChildren(node.children);
      }
    });
  };

  findChildren(tmpTree);

  return tmpTree;
}
</code></pre>
<h2 id="使用案例">使用案例:</h2>
<pre><code>// example:
const data = [{
    &quot;createTime&quot;: &quot;2021-10-27 11:32:00&quot;,
    &quot;id&quot;: 1,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;根目录&quot;,
    &quot;parent&quot;: 0,
    &quot;type&quot;: &quot;ROOT&quot;,
    &quot;updateTime&quot;: &quot;2021-10-27 11:32:00&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 2,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录1&quot;,
    &quot;parent&quot;: 1,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 3,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录2&quot;,
    &quot;parent&quot;: 1,
    &quot;type&quot;: &quot;MODEL&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:13&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 4,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录3&quot;,
    &quot;parent&quot;: 1,
    &quot;type&quot;: &quot;FUNC&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:14&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 5,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录3&quot;,
    &quot;parent&quot;: 1,
    &quot;type&quot;: &quot;RESOURCE&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:16&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 6,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录1-1&quot;,
    &quot;parent&quot;: 2,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 7,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录1-2&quot;,
    &quot;parent&quot;: 2,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 8,
    &quot;isLeaf&quot;: 0,
    &quot;name&quot;: &quot;子目录1-3&quot;,
    &quot;parent&quot;: 2,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 9,
    &quot;isLeaf&quot;: 1,
    &quot;name&quot;: &quot;叶子1-1-1&quot;,
    &quot;parent&quot;: 6,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 10,
    &quot;isLeaf&quot;: 1,
    &quot;name&quot;: &quot;叶子1-1-2&quot;,
    &quot;parent&quot;: 6,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  },
  {
    &quot;createTime&quot;: &quot;2021-10-29 15:02:03&quot;,
    &quot;id&quot;: 11,
    &quot;isLeaf&quot;: 1,
    &quot;name&quot;: &quot;叶子1-1-3&quot;,
    &quot;parent&quot;: 6,
    &quot;type&quot;: &quot;OBJ&quot;,
    &quot;updateTime&quot;: &quot;2021-11-05 15:18:12&quot;
  }
];
let tree = generateTree(
  data,
  { parentId: &quot;parent&quot;, id: &quot;id&quot; },
  (node, props) =&gt; {
    return {
      id: node[props.id],
      parentId: node[props.parentId],
      name: node.name,
      type: node.type,
      isLeaf: node.isLeaf,
      children: null,
      disabled: node.disabled ? node.disabled : false,
      ele: node
    };
  }
);
console.log(tree);
</code></pre>
<h2 id="结果">结果：</h2>
<figure data-type="image" tabindex="1"><img src="https://nongshuqiner.github.io//post-images/code/generateTree/generate-tree-run-result.png" alt="generateTree运行结果" loading="lazy"></figure>
]]></content>
    </entry>
</feed>